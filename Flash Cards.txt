Section 1: Tooling
******************************************************
1)  When is the node_modules folder created and what is its purpose?

  A:  node_modules is a folder created by your first yarn init or 
      add. It stores all the project’s libraries you downloaded with 
      yarn. Don’t forget to add it in your .gitignore.

2)  Define a JS Arrow function square taking one parameter x.

  A:  const square = (x) => {
        return x * x;
      };

3)  How do you export a default function? How do you import it?

  A:  To export a function by default, and simplify the import 
      statement, you can do:
      __________________________________________
      // ./src/foo.js
      function capitalize(word) {
        return word[0].toUpperCase() + word.substr(1).toLowerCase();
      }

      export default capitalize;
      __________________________________________
      // ./src/bar.js
      import capitalize from "./foo";

      console.log(capitalize("boris"));

4)  Which Package Manager do we use to download libraries from NPM?

  A:  Yarn => It works with a package.json file you can bootstrap with:
      
      cmd:  yarn init
      
      Then you can use yarn add command to add libraries from NPM.

5)  Why do you need to add Babel to Webpack?

  A:  Babel is a JavaScript compiler which takes your ES6 code and 
      transforms it into ES5 code, readable by older browsers and 
      tools.

      To add Babel to a Webpack project, run this in the terminal:

      cmd:  yarn add babel-core babel-preset-es2015 --dev
            echo '{ "presets": [ "es2015" ] }' > .babelrc
            
      cmd:  yarn add babel-loader --dev

      And then open the webpack.config.js to add module key:
      __________________________________________
      // [...]
      module: {
        loaders: [{
          test: /\.js$/,
          exclude: /node_modules/,
          loader: 'babel-loader'
        }]
      }

6)  What is the main difference between var and let?

  A:  var: variables are function scoped. They are only available inside 
      the function where they are created.
      let: (and also const) are scoped to the block. The variables 
      won’t leak outside {}.

7)  What is object destructuring?

  A:  Destructuring is a convenient way of extracting multiple values 
      from data stored in Objects and Arrays.
      __________________________________________
      const { twitter, facebook } = user.links.social;
      console.log(twitter, facebook); // logs the 2 variables 

8)  What is JavaScript main Package Repository?

  A:  NPM: The equivalent in Ruby world would be Rubygems.

9) Using Webpack, are functions defined in a file available in 
    other files?

  A:  No. By default, a function defined in foo.js is not available 
      in another file bar.js. It’s not like when you download 
      JavaScript files with a <script /> tag in your HTML, where 
      everything is global and available.
      
      You have to export a function from the foo.js file and import 
      it in bar.js to use it there.

10)  What is Polyfill and why do we need it?

  A:  Polyfill will add missing whole features in an older browser. 
      The classical example is fetch. Some browsers don’t have it, 
      so if you want to use it, you will polyfill it by importing a 
      fetch implementation before using it.

      It’s better to do that conditionaly, meaning you don’t want 
      to re-declare fetch for Google Chrome where it’s already there.

      And for that Polyfill.io is a great solution.

11)  What is the responsibility of the package.json file?

  A:  Similar to Ruby's Gemfile, A package.json file offers you great things:

      - It serves as documentation for what packages your project 
      depends on.
      - It allows you to specify the versions of a package that your 
      project can use using semantic versioning rules.
      - It makes your build reproducible, which means that it’s much 
      easier to share with other developers.

12)  How can you debug JavaScript code?

  A:  Use 'debugger' in the browser's inspector

13)  Why should you add ./node_modules/.bin in your $PATH?

  A:  By adding ./node_modules/.bin in your $PATH any binary command 
      like webpack-dev-server added by a yarn dependency will work in 
      your project regardless of your global setup.

14)  What is the modern way of interpolating in ES6?

  A:  You should use template literals: `I'm ${age} years old`

15)  What is Webpack’s main goal?

  A:  Webpack is a tool to bundle JavaScript files into a single one.

      This way, you can have many JavaScript files to split your code 
      in logical module, and let Webpack do the heavy lifting of 
      concatenating, minifying (and more with plugins) your JavaScript 
      code and make it available with a single HTTP request.

16)  What is the main difference between const and let?

  A:  The value stored in const cannot be reassigned but be careful, 
      the value is still mutable.

17)  How can you run JavaScript on your computer?

  A: In your terminal with node filename.js or node (> Command line).

18)  Which file should you edit to configure your linter?

  A:  ESLint is designed to be completely configurable, meaning you 
      can turn on/off every rule in .eslintrc.json.

19)  How do you create the Webpack bundle for production?

  A:  To create the JS bundle from your source files, you need to run:

        cmd: webpack -p

      Note that by default, Webpack will compile and uglify ES5. If 
      you are using ES6 features like =>, it won’t work. You need Babel!

20)  What tool can help you check the correct style & syntax of your JavaScript code?

  A:  ESLint => To add to a project with an existing package.json, run:

        cmd: yarn add eslint --dev
        cmd: eslint --init

      Then you can run eslint <filename>.js on a specific file to lint it.



Section 2: React Basics
***********************************************************

1)  What steps should you follow to identify the component that owns a piece 
    of state?

  A:  React is all about one-way data flow down the component hierarchy. It may 
      not be immediately clear which component should own what state.

      Steps:
      - Identify every component that depends on that state (check all render() methods).
      - Find a common parent to all of them.

      That component should carry this piece of state.

2)  How should you update the state of a component?

  A:  State of a component should be updated using this.setState().
      
      Anytime the state changes, the render() method is called back.

3)  What is a React component?

  A:  A React component is a collection of Javascript functions.
      
      They accept arbitrary inputs (called “props”) and return HTML describing what 
      should appear on the screen. You can then reuse those independent components, 
      assemble them to build complex UIs.

4)  What is State and how is it used?

  A:  The state is a Javascript mutable object which determine components rendering 
      and behavior. State allows you to create components that are dynamic and interactive.

5)  Describe with your own words what React is?

  A:  React is a frontend Javascript library developed by Facebook in 2011. It follows the 
      component based approach which helps in building reusable UI components.
      
      Design simple views for each state in your application, and React will efficiently 
      update and render just the right components when your data changes.

6)  What is JSX? WHy do we use it?

  A:  JSX stands for JavaScript XML, it makes React more elegant and readable. It 
      allows us to put HTML-like structures in the same file as you write Javascript 
      code.

7)  What is an SPA?

  A:  A single-page application (SPA) is a web application that interacts with the user 
      by dynamically rewriting the current page rather than loading entire new pages 
      from the server.

8)  In a React component is the render() function optional?

  A:  No! Every class-based component must have a render() function. It’s the 
      function that defines the HTML that is generated and injectd in the DOM by the 
      component.

      If more than one HTML element needs to be rendered, then they must be grouped 
      together inside one enclosing tag such as <div>.

9)  What is Props?

  A:  Props is a Javascript object that stores component properties. They are 
      immutable and always passed down from the parent to the child.

10) Is JSX supported by any browser?

  A:  No! You need to run your code through a transpiler like Babel to transform 
      your JSX into a Javascript object.

11) Can stateless components be coded as functions?

  A:  Yes just like this:

        const Hello = (props) => {
          return <h1>Hello, {props.name}</h1>;
        };
        const helloBoris = <Hello name="Boris" />;

12) How do you suscribe to an event on a React component?

  A:  You can subscribe an HTML element to a DOM event by adding an on<Event> attribute 
      and passing it the callback function.

      Usually the callback function is defined within the component:

        clickHandler = () => {
          this.setState({ clicked: true });
        }

        render(){
          return (
            <div onClick={this.clickHandler}>Can be clicked!</div>
          )
        }


      To make sure this refers to the component instance within the callback, 
      make sure you define it with an arrow function!



Section 3: React Advanced
***********************************************************
1) What is the only lifecyle method called when a Component is 
   removed from the DOM?

  A:  componentWillUnmount()

      This method allows us to do some cleanup before removing the 
      Component from the UI stack.
      
2) Which file should you edit to build custom yarn commands?

  A:  You can define scripts in the package.json which will be run 
      in the command line when you invoke it with the yarn command.

3) What are the different phases of the component’s lifecycle?

  A:  - The component’s life starts when it’s inserted in the DOM (Mounting)
      - Then it lives in the DOM and can re-render if it receives new 
        props/state (it remains the same object)
      - It dies when it is removed from the DOM (Unmounting)

4) What should you do to deploy your front-end app on gh-pages?

  A:  cmd:  yarn add gh-pages --dev    # add the module in your project.
      cmd:  webpack -p                  # create your production bundle.
      cmd:  gh-pages -d dist            # deploy it on Github Pages.

5) What is a controlled component?

  A:  Usually, the user action (keystroke, click, …) sets the value of
      the input, and our program reads it before using it in an HTTP 
      request.

      A controlled component is when the user action triggers a 
      setState() in the component, and it’s the React state that sets 
      the value.

      That way, the React state is the single source of truth for the 
      input’s value.

6)  Is the componentWillReceiveProps() function called on the initial 
    rendering?

  A:  No! componentWillReceiveProps() is a lifecycle method invoked 
      only on updates, when new props are passed by its parent.

7) Describe with your own words how React uses the virtual DOM?

  A:  This Virtual DOM works in three simple steps:

      - Whenever a component is about to change, all of its children 
        are supposed to re-render.
      - This operation is done on a virtual copy of the DOM to compute 
        an actual diff between the two objects.
      - The actual DOM is then updated with only the components whose 
        display actually differ. This process is called reconciliation.

8)  How do you fix that error: Each child in an array should have a 
    unique 'key' prop?

  A:  React needs a unique key to each component in order to optimize 
      his rendering process.

      We usually use ids like in the example below:

      todos.map((todo) =>
        return <li key={todo.id}>{todo.text}</li>
      );

9) Which functions are called when a component is mounted into the DOM?

  A:  These methods are called when an instance of a component is being 
      created and inserted into the DOM:

      - constructor()
      - componentWillMount()
      - render()
      - componentDidMount()

10) What is the virtual DOM?

  A:  The virtual DOM is a lightweight JavaScript object which 
      originally is a the copy of the real DOM.

